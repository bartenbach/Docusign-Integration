{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getApi","console","log","fetch","then","response","json","data","document","getElementById","textContent","builderName","src","URL","createObjectURL","base64","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","Blob","type","base64ToBlob","catch","err","error","App","className","logo","alt","onClick","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4IAAe,G,KAAA,IAA0B,kC,cCczC,SAASA,IACPC,QAAQC,IAAI,qCACZC,MAAM,YACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,QAAQC,IAAIK,GACZC,SAASC,eAAe,eAAeC,YAAcH,EAAK,GAAGI,YAC7DH,SAASC,eAAe,UAAUG,IAAMC,IAAIC,gBAlBtD,SAAsBC,GAIlB,IAHA,IAAMC,EAAeC,OAAOC,KAAKH,GAC3BI,EAAMH,EAAaI,OACnBC,EAAQ,IAAIC,WAAWH,GACpBI,EAAI,EAAGA,EAAIJ,IAAOI,EACvBF,EAAME,GAAKP,EAAaQ,WAAWD,GAGvC,OAAO,IAAIE,KAAK,CAACJ,GAAQ,CAAEK,KAAM,oBAUiCC,CAAapB,EAAK,GAAGC,cAEpFoB,OAAM,SAAAC,GAAG,OAAI5B,QAAQ6B,MAAMD,MAChC5B,QAAQC,IAAI,wBAqBC6B,MAlBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,YAAf,UACE,qBAAKpB,IAAKqB,EAAMD,UAAU,WAAWE,IAAI,SACzC,sCAAQ,8CAAR,0BACA,wBAAQC,QAASnC,EAAjB,0BAEF,sBAAKgC,UAAU,WAAf,UACE,8BAAG,+CAAH,IAA4B,sBAAMI,GAAG,mBACrC,wBAAQA,GAAG,SAASxB,IAAI,cC1BnByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B4B,K","file":"static/js/main.e2a8c68a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction base64ToBlob(base64) {\r\n    const binaryString = window.atob(base64);\r\n    const len = binaryString.length;\r\n    const bytes = new Uint8Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n\r\n    return new Blob([bytes], { type: 'application/pdf' });\r\n}\r\n\r\nfunction getApi() {\r\n  console.log('The \\'Get Api\\' button was clicked!');\r\n  fetch('/api/all')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          console.log(data);\r\n          document.getElementById('builderName').textContent = data[0].builderName;\r\n          document.getElementById('pdfDoc').src = URL.createObjectURL(base64ToBlob(data[0].document));\r\n      })\r\n      .catch(err => console.error(err));\r\n  console.log('Everything was done.');\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"col-right\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>Edit <code>src/App.js</code> and save to reload.</p>\r\n          <button onClick={getApi}>Fetch API</button>\r\n        </div>\r\n        <div className=\"col-left\">\r\n          <p><code>PDF Author:</code> <code id=\"builderName\"></code></p>\r\n          <iframe id=\"pdfDoc\" src=\"\"></iframe>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}