plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id "com.github.node-gradle.node" version "3.0.1"
}

group = 'edu.unomaha.docusign'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = [ 'src/main/java' ]
            exclude 'src/main/webapp'
        }
    }
    test {
        java {
            srcDirs = [ 'src/test/java' ]
        }
    }
}

javadoc {
    source = sourceSets.main.allJava
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'
}

node {
    nodeProjectDir = file("${project.projectDir}/src/main/webapp")
    download = false
}

test {
  useJUnitPlatform()
}

task buildReactApp(type: NpxTask){
    dependsOn npmInstall
    description = "Builds React client"
    workingDir = file("${project.projectDir}/src/main/webapp")
    command = 'npx'
    args = ['react-scripts', 'build']
    inputs.files('package.json', 'package-lock.json')
    inputs.dir(fileTree("${project.projectDir}/src/main/webapp/node_modules").exclude(".cache"))
}

npm_test {
    description = "Runs javascript tests with npm"
    workingDir = file("${project.projectDir}/src/main/webapp")
    environment = ['CI': 'true']
}

task cleanClient(type: Delete) {
    delete "${project.projectDir}/src/main/resources/static/*"
    delete "${project.projectDir}/src/main/webapp/build/*"
}

task deployClient(type: Copy) {
   cleanClient
   from "${project.projectDir}/src/main/webapp/build"
   into "${project.projectDir}/src/main/resources/static"
}

task buildClient() {
    dependsOn npmInstall
    dependsOn buildReactApp
//    dependsOn npm_test
}

task buildServer() {
    dependsOn compileJava
    dependsOn compileTestJava
}

clean {
    delete 'src/main/webapp/node_modules'
}

bootRun.dependsOn npmInstall
//bootRun.dependsOn npm_test
bootRun.dependsOn buildReactApp
bootRun.dependsOn compileJava
bootRun.dependsOn compileTestJava
bootRun.dependsOn deployClient
deployClient.dependsOn buildReactApp
bootRun.dependsOn test
bootRun.dependsOn compileJava
